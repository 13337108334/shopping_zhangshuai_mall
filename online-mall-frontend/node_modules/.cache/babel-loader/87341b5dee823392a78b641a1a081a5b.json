{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport ElementUI from \"element-ui\";\nimport router from '../router';\nvar request = axios.create({\n  baseURL: 'http://localhost:8888',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  var user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user) {\n    config.headers['token'] = user.token; // 设置token\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(function (response) {\n  var res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } // 发生错误，如token失效，则返回登录\n\n\n  if (res.code === '402') {\n    ElementUI.MessageBox({\n      title: '错误',\n      message: res.msg\n    }).then(function () {\n      router.push('/login');\n    });\n  }\n\n  return res;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["/Users/mac/Desktop/DM/shopping_zhangshuai_mall/online-mall-frontend/src/utils/request.js"],"names":["axios","ElementUI","router","request","create","baseURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","token","error","Promise","reject","response","res","data","responseType","code","MessageBox","title","message","msg","then","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,uBADgB;AACU;AACnCC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAX;;AACA,MAAGJ,IAAH,EAAQ;AACHF,IAAAA,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BC,IAAI,CAACK,KAA/B,CADG,CACoC;AAC3C;;AACD,SAAOP,MAAP;AACH,CAPD,EAOG,UAAAQ,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CATD,E,CAWA;AACA;;AACAd,OAAO,CAACI,YAAR,CAAqBa,QAArB,CAA8BZ,GAA9B,CACI,UAAAY,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACX,MAAT,CAAgBc,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGT,IAAI,CAACC,KAAL,CAAWQ,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAGA,GAAG,CAACG,IAAJ,KAAW,KAAd,EAAoB;AAChBvB,IAAAA,SAAS,CAACwB,UAAV,CAAqB;AACjBC,MAAAA,KAAK,EAAE,IADU;AAEjBC,MAAAA,OAAO,EAAEN,GAAG,CAACO;AAFI,KAArB,EAGGC,IAHH,CAGQ,YAAK;AACT3B,MAAAA,MAAM,CAAC4B,IAAP,CAAY,QAAZ;AACH,KALD;AAMH;;AACD,SAAOT,GAAP;AACH,CArBL,EAsBI,UAAAJ,KAAK,EAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAxBL;AA4BA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\nimport ElementUI from \"element-ui\";\nimport router from '../router'\n\nconst request = axios.create({\n    baseURL: 'http://localhost:8888',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n    let user = JSON.parse(localStorage.getItem(\"user\"))\n    if(user){\n         config.headers['token'] = user.token;  // 设置token\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 发生错误，如token失效，则返回登录\n        if(res.code==='402'){\n            ElementUI.MessageBox({\n                title: '错误',\n                message: res.msg\n            }).then(() =>{\n                router.push('/login')\n            } )\n        }\n        return res;\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"]},"metadata":{},"sourceType":"module"}